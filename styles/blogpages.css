body {
    margin: 0;
}

.container{
    /* 1. Setting up your container - Width/Height to be relative, and set fonts */

    width: 100vw; /* Note: setting the width and height to 100vw/vh viewport means this div container will always be the full size of the devices page layout (and including the Body margin = 0)*/
    height: 100vh;
    font-family:Arial, Helvetica, sans-serif;
    font-size: 16px;

    /* 2. Set container display to be a grid */

    display: grid; /* Note - this setting defines the container/div as a 'grid' display which is the latest itteration of layout structures for webdesign. Use this for your page layout. */

    /* 3. Define the number of rows and collumns for the grid and their relative/fixed sizes */

    /* grid-template-columns: 1fr 1fr 1fr; /* Note - Define 3 columns of size 1 Fraction of the available space*/
    /* grid-template-rows: 50px 1fr 1fr 100px; Note - Define 4 Rows, Top and bottom with fixed px size, and middle two rows with Relative fraction sizes */

    grid-template: .1fr 1fr 100px / 1fr 10fr 1fr; /* Me being tricky here, using the abbreviated definition.*/

    gap: 10px; /* This sets the padding for all the available zones within the Grid - Excluding the edges of the container*/
    padding: 10px; /* Adding padding to the container of 10px, this will push the container outside of the screens size as there are extra pixels overlapping the full container size*/
    box-sizing: border-box; /* we add this to bring the sizing of the container with its 10px padding back to the full size of the ViewPort frame! */
    
}

.container div {
    /* 4. Here we are just adding the base padding for each component container of the Grid*/
    padding: 10px;
    border: 1px solid #000;
}

.header {
    text-align: center;
    grid-column-start: 1; /* Here we are setting the header Column start and end attributes to span the entire top row of the Grid*/
    grid-column-end: 4;
}

.header ul { /* Here we are defining the CSS for our Navigation Bar*/ 
    list-style-type: none;
    margin: 0;
    padding: 8px;
    width: 100%;
    background-color: #dddddd; /* Have based my navigation menu off the W3schools Tutorial*/
    overflow: hidden;
    box-sizing: border-box;
  }

.header li {
    text-align: center;
    display: inline;
}

.header li a {
    /* display: block; */
    color: #000;
    padding: 8px 16px;
    text-decoration: none;
}

.header li a.active {
    background-color: #6b6b6b;
    color: white;
}

.header li a:hover:not(.active) {
    background-color: #292929;
    color: white;
}

.footer {
    grid-column: 1 / span 3; /* Ok alot here, now we are being tricky and using the more abbreviated approach by defining the grid-start and end within the same definition and also using the grid line refference followed by the Grid Span definition! - Pro Tips! PS: You can do the same for the initial Grid-Template Definition aswell!!! Wow lol*/
}

.content h5 {
    text-align: center;
    margin-top: 10px;
    margin-bottom: 0;
}
.content h4 {
    text-align: center;
    margin-top: 10px;
    margin-bottom: 0;
}

.content p {
    font-size: 11.5px;
}

.content img {
    max-width: 300px;
    height: auto;
}

.content .large-image {
    max-width: 100%;
    height: auto;
}

.margin-properties {
    text-align: left;
}

.marging-properties-smtxt {
    text-align: left;
    font-size: 11.5px;
}
.margin-properties-li {
    color: crimson;
    font-family: Consolas,Menlo,"courier new",monospace;
}

.content {
    margin: 0 auto; /* Note to self; This reight here is a Googled way to set a Child Div container to be Centered Horizonatlly within a Parent Div*/
    max-width: 800px;
    text-align: center;
}

#border-test {
    border-width: 5px;
    border-color: red;
    border-style: dotted;
}

#techblog {
    font-weight: bold;
}